@inject IPasswordManagerAccountRepository<PasswordmanagerAccount> passwordManagerAccountRepository
@inject IJSRuntime jsRuntime

<style>
    .centered_container {
        font-family: arial;
        font-size: 24px;
        margin: 25px;
        width: 350px;
        height: 200px;
        /*outline: dashed 1px black;*/
        /* Setup */
        position: relative;
    }

    .child {
        width: 250px;
        height: 150px;
        /*background-color: red;*/
        /* Center vertically and horizontally */
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }
</style>


@if (PasswordAccountModels is null)
{
    <div class="centered_container">
        <div class="child">
            <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Primary" Value="100" ShowValue="false"
                Mode="ProgressBarMode.Indeterminate" />
        </div>
    </div>
}
else
{
    <h1 class="text-center">Passwords</h1>
    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4"
        Text="Add New Password Account" Click="@InsertRow" Disabled=@(PasswordToInsert != null || PasswordToUpdate
    != null) Sort="@Reset" Page="@Reset" Filter="@Reset" />

    <RadzenDataGrid @ref="dataGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true"
        PageSize="5" AllowSorting="true" EditMode="DataGridEditMode.Single" Data="@PasswordAccountModels"
        TItem="PasswordmanagerAccount" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" ColumnWidth="200px">
        <Columns>
            <RadzenDataGridColumn TItem="PasswordmanagerAccount" Property="Id" Title="Account ID" Width="150px" />

            <RadzenDataGridColumn TItem="PasswordmanagerAccount" Property="CreatedAt" Title="Created At"
                Width="150px">
                <Template Context="passwordAccountModel">
                    @passwordAccountModel.CreatedAt
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="PasswordmanagerAccount" Property="LastUpdatedAt" Title="Last Updated At"
                Width="180px">
                <Template Context="passwordAccountModel">
                    @passwordAccountModel.LastUpdatedAt
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="PasswordmanagerAccount" Property="Title" Title="Title" Width="150px">
                <Template Context="passwordAccountModel">
                    @passwordAccountModel.Title
                </Template>
                <EditTemplate Context="passwordAccountModel">
                    <RadzenTextBox @bind-Value="passwordAccountModel.Title" Style="width:100%" Name="Title" />
                    <RadzenRequiredValidator Text="Title is required" Component="Title" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="PasswordmanagerAccount" Property="UserName" Title="UserName" Width="150px">
                <Template Context="passwordAccountModel">
                    @passwordAccountModel.Username
                </Template>

                <EditTemplate Context="passwordAccountModel">
                    <RadzenTextBox @bind-Value="passwordAccountModel.Username" Style="width:100%; display: block"
                        Name="UserName" />
                    <RadzenRequiredValidator Text="UserName is required" Component="UserName" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="PasswordmanagerAccount" Property="Password" Title="Password" Width="150px">
                <Template Context="passwordAccountModel">
                    <RadzenPassword @bind-Value="@passwordAccountModel.Password"
                        Visible="@(GetPasswordVisibility(passwordAccountModel.Id) == false)" />
                    <RadzenTextBox @bind-Value="@passwordAccountModel.Password"
                        Visible="@(GetPasswordVisibility(passwordAccountModel.Id))" />
                    <br>
                    Show password
                    <RadzenCheckBox TValue="bool" Value=@PasswordVisible[passwordAccountModel.Id] Change=@(args =>
                    PasswordVisible[passwordAccountModel.Id] = args) Name="CheckBox2" />
                </Template>

                <EditTemplate Context="passwordAccountModel">
                    <RadzenPassword @bind-Value="@passwordAccountModel.Password"
                        Visible="@(GetPasswordVisibility(passwordAccountModel.Id) == false)" />
                    <RadzenTextBox @bind-Value="@passwordAccountModel.Password"
                        Visible="@(GetPasswordVisibility(passwordAccountModel.Id))" Name="Password" />
                    <br>
                    Show password
                    <RadzenCheckBox TValue="bool" Value=@PasswordVisible[passwordAccountModel.Id] Change=@(args =>
                    PasswordVisible[passwordAccountModel.Id] = args) Name="CheckBox2" />

                    <RadzenRequiredValidator Text="Password is required" Component="Password" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>
            
            <RadzenDataGridColumn TItem="PasswordmanagerAccount" Context="product" Filterable="false"
                Sortable="false" TextAlign="TextAlign.Right" Width="150px">
                <Template Context="passwordAccountModel">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat"
                        Size="ButtonSize.Medium" Click="@(args => EditRow(passwordAccountModel))"
                    @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat"
                        Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1"
                        Click="@(args => DeleteRow(passwordAccountModel))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>

                <EditTemplate Context="passwordAccountModel">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat"
                        Size="ButtonSize.Medium" Click="@((args) => SaveRow(passwordAccountModel))">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat"
                        Size="ButtonSize.Medium" class="my-1 ms-1"
                        Click="@((args) => CancelEdit(passwordAccountModel))">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat"
                        Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1"
                        Click="@(args => DeleteRow(passwordAccountModel))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>

    <div class="container-fluid mt-5">
        <RadzenCard>
            <div class="row px-3">
                <div class="col-md-3 p-3">
                </div>
                <div class="col-md-3 p-3">
                    <RadzenButton Text="Export CSV" Icon="grid_on" Click="@Export" class="mb-4" />
                </div>
                <div class="col-md-3 p-3">
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Import passwords</RadzenText>
                    <RadzenUpload @ref="upload" Auto="false" Multiple="false" Url=@($"Home/UploadCSV?userId={UserId}") Change=@(args => OnChange(args, "Manual Upload"))
                    Progress=@(args => OnProgress(args, "Manual Upload")) class="w-100" />
                    <RadzenButton Text="Upload" Click=@(args => upload.Upload()) class="d-block mt-4" />
                    <div>
                        <span class="mt-3" style="font-weight:bold;">Click on the link to get the CSV file format sample: <a href="templates/example.csv">Example File</a></span>
                    </div>
                </div>
                <div class="col-md-3 p-3">
                </div>
            </div>
        </RadzenCard>
    </div>

    @if (DeleteDialogOpen)
    {
        <ModalDialog Title="Warning"
                    Text="Are you sure you want to delete this entry?"
                    OnClose="@OnDeleteDialogClose"
                    DialogType="ModalDialog.ModalDialogType.DeleteCancel">
        </ModalDialog>
    }
}

@code {
    private IEnumerable<PasswordmanagerAccount> PasswordAccountModels;
    private RadzenDataGrid<PasswordmanagerAccount> dataGrid;
    private PasswordmanagerAccount? PasswordToInsert = null;
    private PasswordmanagerAccount? PasswordToUpdate = null;
    private Dictionary<string, bool> PasswordVisible = new();

    [Parameter]
    public string UserId { get; set; }

    private void Reset()
    {
        PasswordToInsert = null;
        PasswordToUpdate = null;
    }

    protected override async Task OnInitializedAsync()
    {
        //await jsRuntime.InvokeVoidAsync("alert", "hello");
        await jsRuntime.InvokeVoidAsync("bs");

        PasswordAccountModels = await passwordManagerAccountRepository.GetAllAccountsAsync(UserId!);
    }

    private bool GetPasswordVisibility(string Id)
    {
        if (!PasswordVisible.ContainsKey(Id))
        {
            PasswordVisible.Add(Id, false);
        }

        return PasswordVisible[Id];
    }

    private async Task EditRow(PasswordmanagerAccount model)
    {
        PasswordToUpdate = model;

        // changes the row into edit mode (deactivate template and activate edittemplate)
        await dataGrid.EditRow(model);
    }

    private async Task OnUpdateRow(PasswordmanagerAccount model)
    {
        // reset insert variable
        if (PasswordToInsert == model)
        {
            PasswordToInsert = null;
        }

        PasswordToUpdate = null;

        await passwordManagerAccountRepository.UpdateAsync(model);
    }

    private async Task SaveRow(PasswordmanagerAccount model)
    {
        // System.Console.WriteLine(model);
        await dataGrid.UpdateRow(model);

        PasswordAccountModels = await passwordManagerAccountRepository.GetAllAccountsAsync(UserId);

        PasswordToInsert = PasswordToUpdate = null;
    }

    private async Task OnCreateRow(PasswordmanagerAccount model)
    {
        PasswordToInsert = null;

        // track password visibility
        PasswordVisible[model.Id] = false;

        var create = await passwordManagerAccountRepository.CreateAsync(model);
        
        //System.Console.WriteLine(create);
    }

    private Task CancelEdit(PasswordmanagerAccount model)
    {
        if (model == PasswordToInsert)
        {
            PasswordToInsert = null;
        }

        PasswordVisible.Remove(model.Id);

        PasswordToUpdate = null;

        dataGrid.CancelEditRow(model);
        return Task.CompletedTask;
    }

    private bool DeleteDialogOpen { get; set; } = false;
    private PasswordmanagerAccount accountToDelete { get; set; }

    private async Task OnDeleteDialogClose(bool accepted)
    {
        if (accepted)
        {
            await passwordManagerAccountRepository.DeleteAsync(accountToDelete);
            await dataGrid.Reload();
            PasswordAccountModels = await passwordManagerAccountRepository.GetAllAccountsAsync(UserId);
            accountToDelete = null;
        }
        else
        {
            dataGrid.CancelEditRow(accountToDelete);
            await dataGrid.Reload();
        }

        DeleteDialogOpen = false;
        StateHasChanged();
    }

    private void OpenDeleteDialog(PasswordmanagerAccount acc)
    {
        DeleteDialogOpen = true;
        accountToDelete = acc;
        StateHasChanged();
    }

    private async Task DeleteRow(PasswordmanagerAccount model)
    {
        if (model == PasswordToInsert)
        {
            PasswordToInsert = null;
        }

        if (model == PasswordToUpdate)
        {
            PasswordToUpdate = null;
        }

        if (PasswordAccountModels.FirstOrDefault(acc => acc.Id == model.Id) is not null)
        {
            // open delete dialog
            OpenDeleteDialog(model);
        }
        else
        {
            dataGrid.CancelEditRow(model);
            await dataGrid.Reload();
        }
    }

    private async Task InsertRow()
    {
        PasswordToInsert = new PasswordmanagerAccount
        {
            Id = Guid.NewGuid().ToString(),
            Userid = UserId!,
        };

        await dataGrid!.InsertRow(PasswordToInsert);
    }

    private async void Export()
    {
        Console.WriteLine("exporting...");
        
        StringBuilder builder = new();

        builder.AppendLine("Title,Username,Password,CreatedAt,LastUpdatedAt");

        foreach (var acc in PasswordAccountModels)
        {
            builder.AppendLine($"{acc.Title},{acc.Username},{acc.Password.Replace(",", "+")},{acc.CreatedAt},{acc.LastUpdatedAt}");
        }

        await jsRuntime.InvokeVoidAsync("saveAsFile", "sensitive.csv", builder.ToString());
    }

    private RadzenUpload upload;

    private void OnChange(UploadChangeEventArgs args, string name)
    {
        foreach (var file in args.Files)
        {
            Console.WriteLine($"File: {file.Name} / {file.Size} bytes");
        }
        Console.WriteLine($"{name} changed");
    }

    private async Task OnProgress(UploadProgressArgs args, string name)
    {
        Console.WriteLine($"{args.Progress}% '{name}' / {args.Loaded} of {args.Total} bytes.");
        if (args.Progress == 100)
        {
            foreach (var file in args.Files)
            {
                Console.WriteLine($"Uploaded: {file.Name} / {file.Size} bytes");
            }

            Console.WriteLine("upload complete");

            //PasswordAccountModels = await passwordManagerAccountRepository.GetAllAccountsAsync(UserId);
//
            //StateHasChanged();
        }
    }


}