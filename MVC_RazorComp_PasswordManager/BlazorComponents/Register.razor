@inject NavigationManager NavManager
@inject IAccountRepository accountRepository


<div class="container-fluid">
    <EditForm Model="@Model" OnValidSubmit="HandleRegister" OnInvalidSubmit="ShowErrors">
        <div class="card">
            <h4 class="text-center card-header">
                Sign up
            </h4>
            <div class="card-body">
                <DataAnnotationsValidator />
                <p class="form-group">
                    <label class="m-2">First Name</label>
                    <RadzenTextBox class="form-control" @bind-Value="@Model.FirstName" />
                    <ValidationMessage For="@(() => Model.FirstName)" />
                </p>
                <p class="form-group">
                    <label class="m-2">Last Name</label>
                    <RadzenTextBox class="form-control" @bind-Value="@Model.LastName" />
                    <ValidationMessage For="@(() => Model.LastName)" />
                </p>
                <p class="form-group">
                    <label class="m-2">Email</label>
                    <InputText @bind-Value="Model.Email" class="form-control" />
                    <ValidationMessage For="@(() => Model.Email)" />
                </p>
                <p class="form-group">
                    <label class="m-2">Password</label>
                    <RadzenPassword class="form-control" @bind-Value="@Model.Password"
                        Visible="@(PasswordVisible == false)" />
                    <RadzenTextBox class="form-control" @bind-Value="@Model.Password" Visible="@PasswordVisible" />
                    <br>
                    Show password
                    <RadzenCheckBox @bind-Value="@PasswordVisible" />
                    <ValidationMessage For="@(() => Model.Password)" />
                </p>
                <p class="form-group">
                    <label class="m-2">Confirm Password</label>
                    <RadzenPassword class="form-control" @bind-Value="@Model.ConfirmPassword"
                        Visible="@(ConfirmPasswordVisible == false)" />
                    <RadzenTextBox class="form-control" @bind-Value="@Model.ConfirmPassword"
                        Visible="@ConfirmPasswordVisible" />
                    <br>
                    Show password
                    <RadzenCheckBox @bind-Value="@ConfirmPasswordVisible" />
                    <ValidationMessage For="@(() => Model.ConfirmPassword)" />
                </p>
            </div>
            <div class="m-3">
                <button class="btn btn-primary" disabled="@loading">Register</button>
                @if (loading)
                {
                    <span class="spinner-border spinner-border-sm"></span>
                }
            </div>
        </div>

        <div class="text-center">
            <p>
                Already have an account?
                <a href="/Account/Login">Sign in</a>
            </p>
        </div>
    </EditForm>
</div>


@if (ShouldLogin)
{
    <ModalDialog Title="Error" Text="An error occurred." OnClose="@OnShouldLoginClose"
    DialogType="ModalDialog.ModalDialogType.Ok">
</ModalDialog>
}

@if (DidRegisterSucceed)
{
    <ModalDialog Title="Registration Complete" Text="You are now registered." OnClose="@OnRegisterComplete"
    DialogType="ModalDialog.ModalDialogType.Ok">
</ModalDialog>
}

@code {
    private RegisterModel Model = new();
    private bool PasswordVisible = false;
    private bool ConfirmPasswordVisible = false;
    public bool loading = false;


    private bool ShouldLogin = false;
    private bool DidRegisterSucceed = false;

    private async Task OnShouldLoginClose(bool accepted)
    {
        ShouldLogin = false;
    }

    private async Task OnRegisterComplete(bool accepted)
    {
        if (accepted)
        {
        }
        DidRegisterSucceed = false;

        Model = new();
    }

    private async Task HandleRegister()
    {
        loading = true;
        var result = await accountRepository.RegisterAsync(Model);
        loading = false;

        if (result.Successful)
        {
            DidRegisterSucceed = true;
        }
        else
        {
            ShowErrors();
        }
    }

    private void ShowErrors()
    {
        ShouldLogin = true;
    }
}